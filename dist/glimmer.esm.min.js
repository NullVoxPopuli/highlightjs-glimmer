function m(n){function a(){return{name:"Ember.JS, Glimmer",aliases:["glimmer","hbs","html.hbs","html.handlebars","htmlbars"],case_insensitive:!0,keywords:c,disableAutodetect:!0,contains:[n.COMMENT(/\{\{!--/,/--\}\}/),n.COMMENT(/\{\{!/,/\}\}/),n.COMMENT(/<!--/,/-->/),u,...d,i,g,L,...z]}}let s="eq neq",l="gt gte le lte",o="and or not",e="not-eq xor is-array is-object is-equal",I="let each each-in if else unless",P="log debugger",C="has-block concat fn component helper modifier get hash query-params",U="action on",k="outlet yield",w="true false undefined null",c={$pattern:/\b[\w][\w-]+\b/,keyword:`${k} ${U} ${P}`,built_in:I,function:`${e} ${C} ${s} ${l} ${o}`,literal:w},b=t.either(t.concat(/[a-zA-Z_]/,t.optional(/[A-Z0-9:_.-]*:/),/[A-Z0-9_.-]*/),/[a-z]/),E=/[A-Z][A-Za-z0-9]+/,B=t.either(E,/[a-zA-Z0-9]*\.[a-zA-Z0-9-]*/,t.concat(E,/::/,/-?/,E),/[a-z]/),S=/[a-z-][a-z\d-_]+\b/,y=/[@A-Za-z0-9._:-]+/,u={className:"symbol",begin:/&[a-z]+;|&#[0-9]+;|&#x[a-f0-9]+;/},h={className:"punctuation",match:t.either(/\./,/\{\{\{?#?\/?/,/\}\}\}?/,/\(/,/\)/,/::/,/\|/,/~/)},T={begin:/as\s+\|/,keywords:{keyword:"as"},end:/\|/,contains:[{className:"template-variable",begin:y}]},i={className:"operator",match:/\=/},g={className:{1:"punctuation",2:"params"},match:[/@/,/[\w\d-_]+/]},R={className:{1:"attribute",2:"operator"},match:[/[A-Za-z0-9-_]+/,/=/]},f={className:{1:"class",2:"punctuation",3:"variable"},match:[/this/,/\./,/[^\s}]+/]},H={className:"name",match:/\b\w+\b/},p={className:"title",match:B},_={className:"title",match:S,keywords:c},x={className:"number",match:/[\d]+((\.[\d]+))?/},L={className:"comment",begin:/\{\{!--/,contains:[{className:"comment",match:/.+/},{begin:/--\}\}/,endsParent:!0}]},N={className:"string",variants:[{begin:/"/,end:/"/,contains:[u]},{begin:/'/,end:/'/,contains:[u]}]},r=[h,i,g,x,T,f,R,_,N],M={keywords:c,begin:t.concat(/\(/,t.lookahead(t.concat(/\)/))),end:/\)/,contains:[...r,"self",{begin:/\)/,endsParent:!0}]};r.push(M);let d=[{className:"mustache",keywords:c,begin:t.concat(/\{\{\{?#?/),end:/\}\}\}?/,contains:[{begin:/\}\}\}?/,endsParent:!0},...r,M]}];N.variants.forEach(G=>G.contains.push(...d));let q=[{begin:t.concat(/\{\{#/,t.lookahead(S)),end:/\}\}/,contains:[h,...r,_,H]},{begin:t.concat(/\{\{\//,t.lookahead(t.concat(/\}\}/))),end:/\}\}/,contains:[i,_]}],z=[{className:"tag",begin:t.concat(/<:?/,t.lookahead(t.concat(b,t.either(/\/>/,/>/,/\s/)))),end:/\/?>/,contains:[i,g,L,T,f,...d,R,N,p]},{className:"tag",begin:t.concat(/<\/:?/,t.lookahead(t.concat(b,/>/))),end:/\>/,contains:[p]}];return a()}function v(n){return A("(?=",n,")")}function Z(n){return A("(",n,")?")}function A(...n){return n.map(s=>O(s)).join("")}function $(...n){return"("+n.map(s=>O(s)).join("|")+")"}function O(n){return n?typeof n=="string"?n:n.source:null}var t={lookahead:v,either:$,optional:Z,concat:A};var F=m;function Q(n){j(n),K(n)}function j(n){n.registerLanguage("glimmer",m)}function K(n){X(n)}function X(n){let a=n.getLanguage("javascript");if(!a){console.warn("JavaScript grammar not loaded");return}a=a.rawDefinition(n);let s=a.contains.findIndex(e=>(e==null?void 0:e.begin)==="css`"),l=a.contains[s];a.contains.flatMap(e=>(e==null?void 0:e.contains)||e).filter(e=>e.subLanguage==="xml").forEach(e=>e.subLanguage="glimmer");let o=n.inherit(l,{begin:/hbs`/});o.starts.subLanguage="glimmer",a.contains.splice(s,0,o),n.registerLanguage("javascript",()=>a)}export{F as glimmer,K as registerInjections,j as registerLanguage,Q as setup};
